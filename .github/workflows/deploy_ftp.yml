name: Deploy to Rental Server (FTP)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: |
          composer install --no-dev --optimize-autoloader
          npm install
          npm run build

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 775 storage bootstrap/cache

      # FTPを使用してデプロイ
      - name: Deploy to Server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER || secrets.SSH_HOST }}
          username: ${{ secrets.FTP_USERNAME || secrets.SSH_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_REMOTE_DIR || 'public_html/Jyukul/' }}
          protocol: ftp
          port: 21
          security: loose
          dangerous-clean-slate: false
          log-level: minimal
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            tests/**
            docker-compose.yml
            docker/**
            .env.sail
            .env
            .env.example
            .editorconfig
            .gitattributes
            .gitignore
            README.md
            phpunit.xml
            composer.json
            composer.lock
            package.json
            package-lock.json
            vite.config.js
            storage/**/*.key
            bootstrap/cache/*.php

      # デプロイ完了後にキャッシュクリアスクリプトを実行
      - name: Create Cache Clear Script
        run: |
          cat > public/clear-cache.php << 'EOL'
          <?php
          // 簡易的なセキュリティチェック
          $token = "${{ secrets.CACHE_CLEAR_TOKEN || 'default-token-for-testing' }}"; // GitHub Secretsから取得
          if (!isset($_GET['token']) || $_GET['token'] !== $token) {
              header('HTTP/1.0 403 Forbidden');
              echo "アクセスが拒否されました";
              exit;
          }

          // キャッシュクリアコマンドを実行
          $basePath = __DIR__ . '/..';
          echo "<pre>";
          echo "キャッシュクリアプロセスを開始します... " . date('Y-m-d H:i:s') . "\n";

          // 必要なディレクトリの存在を確認し、なければ作成
          $directories = [
              $basePath . '/storage/framework',
              $basePath . '/storage/framework/views',
              $basePath . '/storage/framework/cache',
              $basePath . '/storage/framework/sessions',
              $basePath . '/storage/logs',
              $basePath . '/bootstrap/cache'
          ];

          echo "必要なディレクトリを確認しています...\n";
          foreach ($directories as $dir) {
              if (!file_exists($dir)) {
                  echo "{$dir} が存在しません。作成します...\n";
                  mkdir($dir, 0775, true);
                  echo "作成完了: {$dir}\n";
              } else {
                  echo "{$dir} は既に存在します\n";
              }
              
              // 権限の確認と修正
              if (!is_writable($dir)) {
                  echo "{$dir} に書き込み権限がありません。権限を変更します...\n";
                  chmod($dir, 0775);
                  echo "権限変更完了: {$dir}\n";
              }
          }

          echo "キャッシュファイルを直接削除中...\n";
          $cacheFiles = glob($basePath . '/bootstrap/cache/*.php');
          foreach ($cacheFiles as $file) {
              unlink($file);
              echo "削除: " . basename($file) . "\n";
          }

          $viewFiles = glob($basePath . '/storage/framework/views/*.php');
          foreach ($viewFiles as $file) {
              unlink($file);
              echo "削除: " . basename($file) . "\n";
          }

          echo "全てのキャッシュクリア処理が完了しました。" . date('Y-m-d H:i:s');
          echo "</pre>";
          EOL

      - name: Trigger Cache Clear
        if: success()
        run: |
          # デプロイ完了後に少し待機
          sleep 10
          # キャッシュクリアスクリプトを呼び出す (サーバーのURLは適宜変更してください)
          SITE_URL="${{ secrets.SITE_URL || format('http://{0}/Jyukul', secrets.SSH_HOST) }}"
          curl -s "${SITE_URL}/clear-cache.php?token=${{ secrets.CACHE_CLEAR_TOKEN || 'default-token-for-testing' }}"
          echo "Cache clear process triggered."
